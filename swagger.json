{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.1",
    "title": "Water Tracker Api",
    "description": "Showing off Water Tracker Api-ui-express",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [{ "url": "https://water-tracker-f07j.onrender.com/api" }],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "User endpoints"
    },
    {
      "name": "Water",
      "description": "Water endpoints"
    }
  ],

  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Register is successfully!",
            "content": {}
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Email is already in use",
            "content": {}
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "Login object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Register is successfully!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogInResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Email or password is wrong",
            "content": {}
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Sending an email to a user with a new password",
        "parameters": [],
        "requestBody": {
          "description": "User email",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPassResponse"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New password sent successfully!",
            "content": {}
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "404": {
            "description": "User with email: email not found",
            "content": {}
          },
          "500": {
            "description": "There are problems on the server, try again later.",
            "content": {}
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {},
        "responses": {
          "201": {
            "description": "User successfully logout"
          },
          "401": {
            "description": "Not authorized!",
            "content": {}
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "tags": ["Auth"],
        "summary": "User registration from Google Api",
        "parameters": [],
        "description": "This route use for google authorization and don't need any params or body. All what you should do send user to google api that give them choose google account and make verification",

        "responses": {
          "": {
            "description": "When user got certification Google Api redirect hem to route: /google-redirect"
          }
        }
      }
    },
    "/auth/google-redirect": {
      "get": {
        "tags": ["Auth"],
        "summary": "User registration from Google Api redirect route",
        "parameters": [],
        "description": "If user got verification, Google send `code` on params. We use this parameter to get user info from Google and to save user in our Api",

        "responses": {
          "": {
            "description": "Saved user get token and redirect to frontend"
          }
        }
      }
    },
    "/user/current": {
      "get": {
        "tags": ["User"],
        "summary": "Get current user with all info",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {},
        "responses": {
          "201": {
            "description": "Get current user data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized!",
            "content": {}
          }
        }
      }
    },
    "/user/updateUser": {
      "patch": {
        "tags": ["User"],
        "summary": "Changing user data",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Data object to update",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Update user data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "User with email: email@gmail.com already exist",
            "content": {}
          },
          "409": {
            "description": "The entered password is incorrect!",
            "content": {}
          }
        }
      }
    },
    "/user/updateAvatar": {
      "patch": {
        "tags": ["User"],
        "summary": "Changing user avatar",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Avatar to update",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "paramType": "body",
                "properties": {
                  "file": {
                    "type": "file",
                    "name": "file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarResponse"
                }
              }
            }
          },
          "400": {
            "description": "File format doesn't supported",
            "content": {}
          },
          "409": {
            "description": "Please add your avatar!",
            "content": {}
          }
        }
      }
    },
    "/user/updateWaterRate": {
      "patch": {
        "tags": ["User"],
        "summary": "Changing daily water rate",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User water rate",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WaterRate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaterRate"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Not authorized!",
            "content": {}
          }
        }
      }
    },
    "/water/": {
      "post": {
        "tags": ["Water"],
        "summary": "Add information about water water rate",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Water rate data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WaterRateDataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaterRateDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Not authorized!",
            "content": {}
          }
        }
      }
    },
    "/water/ {waterId}": {
      "delete": {
        "tags": ["Water"],
        "summary": "Remove information about water water rate",
        "parameters": [
          {
            "name": "waterId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Not need body",
          "required": false,
          "content": {}
        },
        "responses": {
          "200": {
            "description": "Information about water has been successfully deleted!",
            "content": {}
          },
          "404": {
            "description": "`WaterId is not valid id` or `Don't have data with such id : waterId`",
            "content": {}
          },
          "401": {
            "description": "Not authorized!",
            "content": {}
          }
        }
      }
    },
    "/water/{waterId}": {
      "patch": {
        "tags": ["Water"],
        "summary": "Update information about water water rate",
        "parameters": [
          {
            "name": "waterId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Water rate data",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WaterRateDataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaterRateDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Not authorized!",
            "content": {}
          },
          "404": {
            "description": "`WaterId is not valid id` or `Don't have data with such id : waterId`",
            "content": {}
          }
        }
      }
    },
    "/water/today": {
      "get": {
        "tags": ["Water"],
        "summary": "Get a list of daily water data and the percentage of water you drink.",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Water rate data",
          "required": false,
          "content": {}
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaterPercentWithDailyListDataResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized!",
            "content": {}
          }
        }
      }
    },
    "/water/month/info": {
      "post": {
        "tags": ["Water"],
        "summary": "Get a list of daily water data for a given month.",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Date",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WaterDateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaterDateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Not authorized!",
            "content": {}
          },
          "404": {
            "description": "Date is note correct!",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "12345678"
          }
        }
      },
      "LogInResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "avatar": {
            "type": "string",
            "description": "User avatar link",
            "example": "http://res.cloudinary.com/..."
          },
          "token": {
            "type": "string",
            "description": "User token",
            "example": "daf7f8a7fy8a7sfda7sydf"
          }
        },
        "example": {
          "email": "stich@gmail.com",
          "avatar": "http://res.cloudinary.com/...",
          "token": "daf7f8a7fy8a7sfda7sydf"
        }
      },
      "NewPassResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          }
        },
        "example": {
          "email": "stich@gmail.com"
        }
      },
      "CurrentResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "example": ""
          },
          "name": {
            "type": "string",
            "description": "User avatar name",
            "example": "User User"
          },
          "gender": {
            "type": "string",
            "enum": ["male", "female"],
            "description": "User gender",
            "example": "male"
          },
          "avatar": {
            "type": "string",
            "description": "User avatar link",
            "example": "http://res.cloudinary.com/..."
          },
          "dailyNorma": {
            "type": "number",
            "description": "User water daily normal",
            "example": "2"
          },
          "token": {
            "type": "string",
            "description": "User token",
            "example": "daf7f8a7fy8a7sfda7sydf"
          }
        },
        "example": {
          "email": "stich@gmail.com",
          "name": "Stich",
          "gender": "male",
          "dailyNorma": "2",
          "avatar": "http://res.cloudinary.com/...",
          "token": "daf7f8a7fy8a7sfda7sydf"
        }
      },
      "UpdateRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "name": {
            "type": "string",
            "description": "User avatar name",
            "example": "User User"
          },
          "passwordNew": {
            "type": "string",
            "description": "User's password",
            "example": "12345678"
          },
          "passwordOld": {
            "type": "string",
            "description": "User's password",
            "example": "12345678"
          },
          "gender": {
            "type": "string",
            "enum": ["male", "female"],
            "description": "User gender",
            "example": "male"
          }
        },
        "example": {
          "email": "stich@gmail.com",
          "passwordOld": "12345678",
          "passwordNew": "987654321",
          "name": "Stich",
          "gender": "male"
        }
      },
      "UpdateResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "name": {
            "type": "string",
            "description": "User avatar name",
            "example": "User User"
          },
          "gender": {
            "type": "string",
            "enum": ["male", "female"],
            "description": "User gender",
            "example": "male"
          }
        },
        "example": {
          "email": "stich@gmail.com",
          "name": "Stich",
          "gender": "male"
        }
      },
      "AvatarResponse": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "description": "User avatar link",
            "example": "http://res.cloudinary.com/..."
          }
        },
        "example": {
          "avatar": "http://res.cloudinary.com/..."
        }
      },
      "WaterRate": {
        "type": "object",
        "properties": {
          "dailyNorma": {
            "type": "number",
            "description": "User daily normal water rate",
            "example": "4000"
          }
        },
        "example": {
          "dailyNorma": "4000"
        }
      },
      "WaterRateDataRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Water amount",
            "example": "4000"
          },
          "time": {
            "type": "date",
            "description": "Water intake time",
            "example": "2023-12-05T09:17:49.355+00:00"
          }
        },
        "example": {
          "amount": "4000",
          "time": "2023-12-05T09:17:49.355+00:00"
        }
      },
      "WaterRateDataResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Water amount",
            "example": "4000"
          },
          "time": {
            "type": "date",
            "description": "Water intake time",
            "example": "2354-03-06T06:35:45.245Z"
          },
          "_id": {
            "type": "object",
            "description": "Id",
            "example": "656dc860f4cebbf99c5d6520"
          }
        },
        "example": {
          "amount": "4000",
          "time": "2354-03-06T06:35:45.245Z",
          "_id": "656dc860f4cebbf99c5d6520"
        }
      },
      "WaterPercentWithDailyListDataResponse": {
        "type": "object",
        "properties": {
          "percent": {
            "type": "number",
            "description": "Percent of drink water",
            "example": "4000"
          },
          "dailyWaterList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WaterRateDataResponse"
            }
          }
        },
        "example": {
          "percent": "40",
          "dailyWaterList": [
            {
              "amount": "4000",
              "time": "2354-03-06T06:35:45.245Z",
              "_id": "656dc860f4cebbf99c5d6520"
            }
          ]
        }
      },
      "WaterDateRequest": {
        "type": "object",
        "properties": {
          "date": {
            "type": "date",
            "description": "Date",
            "example": "2023-12-03T12:39:08.018+00:00"
          }
        },
        "example": {
          "date": "2023-12-03T12:39:08.018+00:00"
        }
      },
      "WaterDateResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "date": {
              "type": "object",
              "properties": {
                "day": {
                  "type": "number",
                  "description": "Day value",
                  "example": "5"
                },
                "month": {
                  "type": "number",
                  "description": "Month value",
                  "example": "12"
                }
              }
            },
            "dailyNorma": {
              "type": "number",
              "description": "Water daily norma",
              "example": "10000"
            },
            "percent": {
              "type": "number",
              "description": "The percent from dailyWater",
              "example": "45"
            },
            "quantity": {
              "type": "number",
              "description": "Total number of water intakes per day",
              "example": "45"
            }
          }
        },
        "example": {
          "date": {
            "day": 1,
            "month": 12
          },
          "dailyNorma": 10000,
          "percent": 0,
          "quantity": 0
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
